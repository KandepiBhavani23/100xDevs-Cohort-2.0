## 1. Expression & Statements

	-> A fragment of code that produces a value is called an expression.
	-> If an expression corresponds to a sentence fragment, a JavaScript
	   statement corresponds to a full sentence. A program is a list of statements.
	-> The simplest kind of statement is an expression with a semicolon after it.
	   1; !false;

## 2. Bindings 

	-> How does a program keep an internal state? 
		To catch and hold values, JavaScript provides a thing called a binding, or variable
	-> Eg. let caught = 5 * 5;
		- The special word (keyword) let indicates that this sentence is going to define a binding.
		- It is followed by the name of the binding and, if we want to immediately give it a value, by an = operator and an expression
		- The previous statement creates a binding called caught and uses it to grab hold of the number that is produced by multiplying 5 by 5
	-> A single let statement may define multiple bindings. The definitions must be separated by commas.
		-------------------------
	      let one = 1, two = 2;
		  console.log(one + two) 
		-------------------------
	-> The words var and const can also be used to create bindings, in a way similar to let

## 3. Binding Names

	-> Name must not start with a digit but it can include digits.
	-> A binding name may include dollar signs ($) or underscores (_)but no other punctuation or special characters.
	-> "reserved" keywords can't be used as Binding Names.
	    Reserved KeyWords List 
		----
		break case catch class const continue debugger default
		delete do else enum export extends false finally for
		function if implements import interface in instanceof let
		new package private protected public return static super
		switch this throw true try typeof var void while with yield
		----

## 4. Functions

	-> A function is a piece of program wrapped in a value.
	-> Such values can be applied in order to run the wrapped program.
	-> For example, in a browser environment, the binding "prompt" holds a function that
		shows a little dialog box asking for user input.
			-------------------------
		     prompt("Enter passcode");
			-------------------------
	-> Executing a function is called invoking, calling, or applying it

## 5. The console.log function

	-> JavaScript systems (including all modern web browsers and Node.js) provide a console.log function that writes out its arguments to some text output device.
	-> Though binding names cannot contain period characters, console.log does have one. This is because console.log isn’t a simple binding. It is actually an expression that retrieves the log property from the value held by the console binding.

## 6. Control flow

	-> When your program contains more than one statement, the statements are executed from top to bottom.
	 
			let theNumber = Number(prompt("Pick a number"));
    		console.log("Your number is the square root of " + theNumber * theNumber);

## 7. Conditional execution
	-> While and Do While 
	-> For Loops 
	-> If, else Statements

## 8. Breaking Out of a Loop
	-> There is a special statement called break that has the effect of immediately jumping out of the enclosing loop.
	-> The continue keyword is similar to break, in that it influences the progress of a loop. When continue is encountered in a loop body, control jumps out of the body and continues with the loop’s next iteration.

## 9. Dispatching on a value with switch
	switch (prompt("What is the weather like?")) {
		case "rainy":
			console.log("Remember to bring an umbrella.");
			break;
		case "sunny":
			console.log("Dress lightly.");
			break;
		case "cloudy":
			console.log("Go outside.");
			break;
		default:
			console.log("Unknown weather type!");
			break;
	}

## 10. Capitalization
	-> Binding names may not contain spaces, yet it is often helpful to use multiple words to clearly describe what the binding represents. 
	-> These are pretty much your choices for writing a binding name with several words in it.

		fuzzylittleturtle
		fuzzy_little_turtle
		FuzzyLittleTurtle
		fuzzyLittleTurtle [most follow convention]
	